snippet con "const = " i
const ${1} = ${2}
endsnippet

snippet aaf "async arrow function" i
async (${1:params}: ${2:any}) => { ${3} }
endsnippet

snippet af "arrow function" i
(${1:params}: ${2:any}) => { ${3} }
endsnippet

snippet functor "class Functor" b
class ${1:Functor} {
  private val: ${2:any}
  constructor(val: ${2}) {
    this.val = val
  }

  get value() {
    return this.val
  }

  static of(val: ${2}) {
    return new ${1}(val)
  }

  map(fn: (val: ${2}) => ${2}) {
    return new ${1}(fn(this.val))
  }

  ${3:handle}(${4:param}: ${5:any}) {
    return new ${1}(this.val + ${4})
  }
}
endsnippet

snippet fetch "mock fetch" b
const mock = function (url: string) {
  if (!url) {
    throw new Error("Url required!")
  }

  const _fetch = async (${1:args}?: ${2:any}) => {
    const rawBody = { ...${1} }
    const opts: RequestInit = {
      method: "${3:post}",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json, text/plain, */*",
      },
      credentials: "include",
      mode: "cors",
      cache: "no-cache",
      body: JSON.parse(JSON.stringify(rawBody)),
    }

    return fetch(url, opts).then((res) => {
      ${4:console.log(res)}
    })
  }

  return _fetch
}

mock("${5:http://127.0.0.1}:${6:8080}/${7:test}")(${8:\{ a: 1 \}})
endsnippet
